import telebot
import random
import time
import json
import requests
from telebot import types
from bs4 import BeautifulSoup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7634013623:AAGjUEY5wT3ouSwV22Zn3e4iWEe4JWiOUeU"
bot = telebot.TeleBot(TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
games = {}
user_stats = {}
hangman_words = ["–ø–∏—Ç–æ–Ω", "—Ç–µ–ª–µ–≥—Ä–∞–º", "–±–æ—Ç", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∏–≥—Ä–∞", "—Ç–µ—Ä–º—É–∫—Å", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]
trivia_questions = []
blackjack_deck = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–¥—ã –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞
def init_blackjack_deck():
    global blackjack_deck
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    suits = ['‚ô•', '‚ô¶', '‚ô£', '‚ô†']
    blackjack_deck = [f"{rank}{suit}" for suit in suits for rank in ranks]
    random.shuffle(blackjack_deck)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def load_trivia_questions():
    global trivia_questions
    questions = [
        {"question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "answer": "–ø–∞—Ä–∏–∂", "options": ["–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–†–∏–º"]},
        {"question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "answer": "8", "options": ["8", "9", "7", "10"]},
        {"question": "–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ?", "answer": "—Å–∏–Ω–∏–π –∫–∏—Ç", "options": ["–°–ª–æ–Ω", "–°–∏–Ω–∏–π –∫–∏—Ç", "–ñ–∏—Ä–∞—Ñ", "–ë–µ–≥–µ–º–æ—Ç"]},
        {"question": "2 + 2 √ó 2 = ?", "answer": "6", "options": ["6", "8", "4", "10"]},
        {"question": "–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?", "answer": "—Ç–æ–∫–∏–æ", "options": ["–ü–µ–∫–∏–Ω", "–°–µ—É–ª", "–¢–æ–∫–∏–æ", "–ë–∞–Ω–≥–∫–æ–∫"]}
    ]
    trivia_questions = questions

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "‚úä –ö–ù–ë", "üé≤ –ö–æ—Å—Ç–∏", 
        "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üí£ –°–∞–ø—ë—Ä", "üÉè –ë–ª—ç–∫–¥–∂–µ–∫",
        "üß© –í–∏—Å–µ–ª–∏—Ü–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùå –í—ã—Ö–æ–¥"
    ]
    markup.add(*buttons)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    if user_id not in user_stats:
        user_stats[user_id] = {
            'games_played': 0,
            'wins': 0,
            'guess_wins': 0,
            'rps_wins': 0,
            'dice_wins': 0,
            'trivia_score': 0,
            'blackjack_wins': 0,
            'hangman_wins': 0
        }
    
    bot.send_message(message.chat.id,
        "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç!*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n"
        "‚Ä¢ üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (1-100)\n"
        "‚Ä¢ ‚úä –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞\n"
        "‚Ä¢ üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π\n"
        "‚Ä¢ üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏\n"
        "‚Ä¢ üí£ –ò–≥—Ä–∞ –°–∞–ø—ë—Ä\n"
        "‚Ä¢ üÉè –ë–ª—ç–∫–¥–∂–µ–∫ (21 –æ—á–∫–æ)\n"
        "‚Ä¢ üß© –í–∏—Å–µ–ª–∏—Ü–∞ (—É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã!",
        parse_mode='Markdown', reply_markup=main_menu()
    )

# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
@bot.message_handler(func=lambda message: message.text == "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
def guess_game_start(message):
    chat_id = message.chat.id
    number = random.randint(1, 100)
    games[chat_id] = {
        'type': 'guess',
        'number': number,
        'attempts': 0,
        'max_attempts': 10
    }
    
    bot.send_message(chat_id, 
        "üéØ *–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!*\n"
        f"–£ —Ç–µ–±—è {games[chat_id]['max_attempts']} –ø–æ–ø—ã—Ç–æ–∫!\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ!",
        parse_mode='Markdown'
    )

# –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
@bot.message_handler(func=lambda message: message.text == "‚úä –ö–ù–ë")
def rps_game(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton("‚úä", callback_data="rps_rock"),
        types.InlineKeyboardButton("‚úåÔ∏è", callback_data="rps_scissors"),
        types.InlineKeyboardButton("‚úã", callback_data="rps_paper")
    ]
    markup.add(*buttons)
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:", reply_markup=markup)

# –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π
@bot.message_handler(func=lambda message: message.text == "üé≤ –ö–æ—Å—Ç–∏")
def dice_game(message):
    chat_id = message.chat.id
    user_dice = random.randint(1, 6)
    bot_dice = random.randint(1, 6)
    
    result = "üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª!" if user_dice > bot_dice else "ü§ñ –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!" if bot_dice > user_dice else "ü§ù –ù–∏—á—å—è!"
    
    bot.send_message(chat_id,
        f"üé≤ *–ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π!*\n\n"
        f"–¢–≤–æ—è –∫–æ—Å—Ç—å: {user_dice}\n"
        f"–ö–æ—Å—Ç—å –±–æ—Ç–∞: {bot_dice}\n\n"
        f"{result}",
        parse_mode='Markdown'
    )
    
    user_stats[message.from_user.id]['games_played'] += 1
    if user_dice > bot_dice:
        user_stats[message.from_user.id]['wins'] += 1
        user_stats[message.from_user.id]['dice_wins'] += 1

# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
def trivia_start(message):
    chat_id = message.chat.id
    load_trivia_questions()
    
    if not trivia_questions:
        bot.send_message(chat_id, "‚ùå –í–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
        return
    
    question = random.choice(trivia_questions)
    games[chat_id] = {
        'type': 'trivia',
        'question': question,
        'start_time': time.time()
    }
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(opt) for opt in question['options']]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    
    bot.send_message(chat_id,
        f"üéÆ *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞!*\n\n{question['question']}",
        parse_mode='Markdown', reply_markup=markup
    )

# –°–∞–ø—ë—Ä
@bot.message_handler(func=lambda message: message.text == "üí£ –°–∞–ø—ë—Ä")
def minesweeper_start(message):
    chat_id = message.chat.id
    size = 5
    mines = 5
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ
    field = [['‚¨ú' for _ in range(size)] for _ in range(size)]
    mine_positions = set()
    
    while len(mine_positions) < mines:
        mine_positions.add((random.randint(0, size-1), random.randint(0, size-1)))
    
    games[chat_id] = {
        'type': 'minesweeper',
        'field': field,
        'mines': mine_positions,
        'revealed': set(),
        'game_over': False
    }
    
    display_field(chat_id)

def display_field(chat_id):
    game_data = games[chat_id]
    field_text = "üí£ *–°–∞–ø—ë—Ä* - –í—ã–±–µ—Ä–∏ –∫–ª–µ—Ç–∫—É:\n\n"
    
    for i in range(len(game_data['field'])):
        for j in range(len(game_data['field'][i])):
            if (i, j) in game_data['revealed']:
                if (i, j) in game_data['mines']:
                    field_text += "üí£ "
                else:
                    mines_nearby = count_nearby_mines(i, j, game_data['mines'])
                    field_text += f"{mines_nearby}Ô∏è‚É£ " if mines_nearby > 0 else "üü© "
            else:
                field_text += "‚¨ú "
        field_text += "\n"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–µ—Ç–æ–∫
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    buttons = []
    for i in range(5):
        for j in range(5):
            buttons.append(types.KeyboardButton(f"{i+1}-{j+1}"))
    markup.add(*buttons)
    markup.add(types.KeyboardButton("‚ùå –°–¥–∞—Ç—å—Å—è"))
    
    bot.send_message(chat_id, field_text, parse_mode='Markdown', reply_markup=markup)

def count_nearby_mines(x, y, mines):
    count = 0
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            if (x + dx, y + dy) in mines:
                count += 1
    return count

# –ë–ª—ç–∫–¥–∂–µ–∫
@bot.message_handler(func=lambda message: message.text == "üÉè –ë–ª—ç–∫–¥–∂–µ–∫")
def blackjack_start(message):
    chat_id = message.chat.id
    init_blackjack_deck()
    
    player_hand = [blackjack_deck.pop(), blackjack_deck.pop()]
    dealer_hand = [blackjack_deck.pop(), blackjack_deck.pop()]
    
    games[chat_id] = {
        'type': 'blackjack',
        'player_hand': player_hand,
        'dealer_hand': dealer_hand,
        'deck': blackjack_deck.copy(),
        'state': 'player_turn'
    }
    
    display_blackjack(chat_id)

def display_blackjack(chat_id):
    game_data = games[chat_id]
    player_score = calculate_hand_value(game_data['player_hand'])
    
    text = "üÉè *–ë–ª—ç–∫–¥–∂–µ–∫* - 21 –æ—á–∫–æ!\n\n"
    text += f"–¢–≤–æ—è —Ä—É–∫–∞: {', '.join(game_data['player_hand'])} (–æ—á–∫–æ–≤: {player_score})\n"
    text += f"–î–∏–ª–µ—Ä: {game_data['dealer_hand'][0]}, ?\n\n"
    
    if game_data['state'] == 'player_turn':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("‚ûï –ï—â—ë", "‚úã –•–≤–∞—Ç–∏—Ç", "‚ùå –í—ã—Ö–æ–¥")
        text += "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        markup = main_menu()
    
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup)

def calculate_hand_value(hand):
    value = 0
    aces = 0
    
    for card in hand:
        rank = card[:-1]
        if rank in ['J', 'Q', 'K']:
            value += 10
        elif rank == 'A':
            aces += 1
            value += 11
        else:
            value += int(rank)
    
    while value > 21 and aces > 0:
        value -= 10
        aces -= 1
    
    return value

# –í–∏—Å–µ–ª–∏—Ü–∞
@bot.message_handler(func=lambda message: message.text == "üß© –í–∏—Å–µ–ª–∏—Ü–∞")
def hangman_start(message):
    chat_id = message.chat.id
    word = random.choice(hangman_words)
    hidden_word = ['_' for _ in word]
    
    games[chat_id] = {
        'type': 'hangman',
        'word': word,
        'hidden_word': hidden_word,
        'attempts': 6,
        'used_letters': set(),
        'game_over': False
    }
    
    display_hangman(chat_id)

def display_hangman(chat_id):
    game_data = games[chat_id]
    hangman_states = [
        """
        
        
        
        
        
        """,
        """
        
          
          
          
        üëá
        """,
        """
        ‚òπÔ∏è  
          
          
          
        üëá
        """,
        """
        ‚òπÔ∏è  
        |  
        |  
        |  
        üëá
        """,
        """
        ‚òπÔ∏è  
        |\\ 
        |  
        |  
        üëá
        """,
        """
        ‚òπÔ∏è  
        |\\ 
        |  
        |/ 
        üëá
        """,
        """
        ‚òπÔ∏è  
        |\\ 
        |  
        |/ \\
        üëá
        """
    ]
    
    text = f"üß© *–í–∏—Å–µ–ª–∏—Ü–∞* - –ü–æ–ø—ã—Ç–æ–∫: {game_data['attempts']}\n\n"
    text += hangman_states[6 - game_data['attempts']] + "\n"
    text += f"–°–ª–æ–≤–æ: {' '.join(game_data['hidden_word'])}\n"
    text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {', '.join(sorted(game_data['used_letters']))}\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É:"
    
    bot.send_message(chat_id, text, parse_mode='Markdown')

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    user_id = message.from_user.id
    stats = user_stats.get(user_id, {})
    
    text = "üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
    text += f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats.get('games_played', 0)}\n"
    text += f"üèÜ –ü–æ–±–µ–¥: {stats.get('wins', 0)}\n"
    text += f"üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ: {stats.get('guess_wins', 0)}\n"
    text += f"‚úä –ö–ù–ë: {stats.get('rps_wins', 0)}\n"
    text += f"üé≤ –ö–æ—Å—Ç–∏: {stats.get('dice_wins', 0)}\n"
    text += f"üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: {stats.get('trivia_score', 0)}\n"
    text += f"üÉè –ë–ª—ç–∫–¥–∂–µ–∫: {stats.get('blackjack_wins', 0)}\n"
    text += f"üß© –í–∏—Å–µ–ª–∏—Ü–∞: {stats.get('hangman_wins', 0)}"
    
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

# –í—ã—Ö–æ–¥
@bot.message_handler(func=lambda message: message.text == "‚ùå –í—ã—Ö–æ–¥")
def exit_game(message):
    chat_id = message.chat.id
    if chat_id in games:
        del games[chat_id]
    bot.send_message(chat_id, "üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ (–¥–ª—è –ö–ù–ë)
@bot.callback_query_handler(func=lambda call: call.data.startswith('rps_'))
def handle_rps(call):
    user_choice = call.data.split('_')[1]
    choices = {'rock': '‚úä', 'scissors': '‚úåÔ∏è', 'paper': '‚úã'}
    bot_choice = random.choice(list(choices.keys()))
    
    if user_choice == bot_choice:
        result = "ü§ù –ù–∏—á—å—è!"
    elif (user_choice == 'rock' and bot_choice == 'scissors') or \
         (user_choice == 'scissors' and bot_choice == 'paper') or \
         (user_choice == 'paper' and bot_choice == 'rock'):
        result = "üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª!"
        user_stats[call.from_user.id]['wins'] += 1
        user_stats[call.from_user.id]['rps_wins'] += 1
    else:
        result = "ü§ñ –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!"
    
    user_stats[call.from_user.id]['games_played'] += 1
    
    bot.edit_message_text(
        f"‚úä *–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞*\n\n"
        f"–¢–≤–æ–π –≤—ã–±–æ—Ä: {choices[user_choice]}\n"
        f"–í—ã–±–æ—Ä –±–æ—Ç–∞: {choices[bot_choice]}\n\n"
        f"{result}",
        call.message.chat.id, call.message.message_id, parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.strip()
    
    if chat_id not in games:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ –º–µ–Ω—é!", reply_markup=main_menu())
        return
    
    game_data = games[chat_id]
    
    # –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
    if game_data['type'] == 'guess':
        try:
            guess = int(text)
            game_data['attempts'] += 1
            
            if guess < game_data['number']:
                bot.send_message(chat_id, "üìà –ë–æ–ª—å—à–µ!")
            elif guess > game_data['number']:
                bot.send_message(chat_id, "üìâ –ú–µ–Ω—å—à–µ!")
            else:
                user_stats[user_id]['games_played'] += 1
                user_stats[user_id]['wins'] += 1
                user_stats[user_id]['guess_wins'] += 1
                bot.send_message(chat_id, 
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {game_data['number']} "
                    f"–∑–∞ {game_data['attempts']} –ø–æ–ø—ã—Ç–æ–∫!", 
                    reply_markup=main_menu()
                )
                del games[chat_id]
                return
            
            if game_data['attempts'] >= game_data['max_attempts']:
                bot.send_message(chat_id, 
                    f"‚ùå –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ß–∏—Å–ª–æ –±—ã–ª–æ: {game_data['number']}", 
                    reply_markup=main_menu()
                )
                del games[chat_id]
                
        except ValueError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
    elif game_data['type'] == 'trivia':
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=main_menu())
            del games[chat_id]
            return
        
        correct_answer = game_data['question']['answer']
        if text.lower() == correct_answer.lower():
            user_stats[user_id]['trivia_score'] += 1
            user_stats[user_id]['games_played'] += 1
            user_stats[user_id]['wins'] += 1
            bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=main_menu())
        else:
            bot.send_message(chat_id, 
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}", 
                reply_markup=main_menu()
            )
            user_stats[user_id]['games_played'] += 1
        del games[chat_id]
    
    # –°–∞–ø—ë—Ä
    elif game_data['type'] == 'minesweeper':
        if text == "‚ùå –°–¥–∞—Ç—å—Å—è":
            bot.send_message(chat_id, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu())
            del games[chat_id]
            return
        
        try:
            coords = text.split('-')
            x, y = int(coords[0])-1, int(coords[1])-1
            
            if (x, y) in game_data['revealed']:
                bot.send_message(chat_id, "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
                return
            
            game_data['revealed'].add((x, y))
            
            if (x, y) in game_data['mines']:
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë –ø–æ–ª–µ
                for mx, my in game_data['mines']:
                    game_data['revealed'].add((mx, my))
                display_field(chat_id)
                bot.send_message(chat_id, "üí• –¢—ã –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –º–∏–Ω—É! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!", reply_markup=main_menu())
                user_stats[user_id]['games_played'] += 1
                del games[chat_id]
            else:
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–±–µ–¥—É
                if len(game_data['revealed']) == 25 - len(game_data['mines']):
                    display_field(chat_id)
                    bot.send_message(chat_id, "üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª! –í—Å–µ –º–∏–Ω—ã –æ–±–µ–∑–≤—Ä–µ–∂–µ–Ω—ã!", reply_markup=main_menu())
                    user_stats[user_id]['games_played'] += 1
                    user_stats[user_id]['wins'] += 1
                    del games[chat_id]
                else:
                    display_field(chat_id)
                    
        except (ValueError, IndexError):
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
