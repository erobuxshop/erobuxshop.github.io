import telebot
import random
import time
import logging
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7634013623:AAGjUEY5wT3ouSwV22Zn3e4iWEe4JWiOUeU"
bot = telebot.TeleBot(TOKEN)

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
games = {}
user_stats = {}
waiting_players = {}
active_matches = {}

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∏–≥—Ä
hangman_words = ["–ø–∏—Ç–æ–Ω", "—Ç–µ–ª–µ–≥—Ä–∞–º", "–±–æ—Ç", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∏–≥—Ä–∞", "—á–∞—Ç", "–≥—Ä—É–ø–ø–∞", "–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä"]
trivia_questions = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def load_trivia_questions():
    global trivia_questions
    questions = [
        {"question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "answer": "–ø–∞—Ä–∏–∂", "options": ["–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–†–∏–º"]},
        {"question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "answer": "8", "options": ["8", "9", "7", "10"]},
        {"question": "2 + 2 √ó 2 = ?", "answer": "6", "options": ["6", "8", "4", "10"]}
    ]
    trivia_questions = questions

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "‚úä –ö–ù–ë", "üé≤ –ö–æ—Å—Ç–∏", 
        "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üí£ –°–∞–ø—ë—Ä", "üÉè –ë–ª—ç–∫–¥–∂–µ–∫",
        "üß© –í–∏—Å–µ–ª–∏—Ü–∞", "‚öîÔ∏è –ö–ù–ë —Å –∏–≥—Ä–æ–∫–æ–º", "üéØ –î–∞—Ä—Ç—Å",
        "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùå –í—ã—Ö–æ–¥"
    ]
    markup.add(*buttons)
    return markup

# –ú–µ–Ω—é –¥–ª—è –ö–ù–ë —Å –∏–≥—Ä–æ–∫–æ–º
def rps_multiplayer_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["‚úä", "‚úåÔ∏è", "‚úã", "‚ùå –û—Ç–º–µ–Ω–∞"]
    markup.add(*buttons)
    return markup

# –ú–µ–Ω—é –¥–ª—è –¥–∞—Ä—Ç—Å–∞
def darts_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = ["üéØ –ë—Ä–æ—Å–∏—Ç—å –¥—Ä–æ—Ç–∏–∫", "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚ùå –í—ã—Ö–æ–¥"]
    markup.add(*buttons)
    return markup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user(user_id, username):
    if user_id not in user_stats:
        user_stats[user_id] = {
            'username': username,
            'games_played': 0,
            'wins': 0,
            'rps_wins': 0,
            'rps_multi_wins': 0,
            'darts_score': 0,
            'darts_games': 0
        }

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start', 'help', 'games'])
def send_welcome(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.first_name
    
    init_user(user_id, username)
    
    welcome_text = (
        "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ multiplayer –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç!*\n\n"
        "üåü *–û–¥–∏–Ω–æ—á–Ω—ã–µ –∏–≥—Ä—ã:*\n"
        "‚Ä¢ üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (1-100)\n"
        "‚Ä¢ ‚úä –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ vs –ë–æ—Ç\n"
        "‚Ä¢ üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π\n"
        "‚Ä¢ üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "‚Ä¢ üí£ –°–∞–ø—ë—Ä\n"
        "‚Ä¢ üÉè –ë–ª—ç–∫–¥–∂–µ–∫\n"
        "‚Ä¢ üß© –í–∏—Å–µ–ª–∏—Ü–∞\n\n"
        "üé≠ *Multiplayer –∏–≥—Ä—ã:*\n"
        "‚Ä¢ ‚öîÔ∏è –ö–ù–ë —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º\n"
        "‚Ä¢ üéØ –î–∞—Ä—Ç—Å (—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã!"
    )
    
    bot.send_message(chat_id, welcome_text, parse_mode='Markdown', reply_markup=main_menu())

# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
@bot.message_handler(func=lambda message: message.text == "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
def guess_game_start(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    number = random.randint(1, 100)
    games[chat_id] = {
        'type': 'guess',
        'number': number,
        'attempts': 0,
        'max_attempts': 8,
        'player_id': user_id
    }
    
    bot.send_message(chat_id, 
        f"üéØ *–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!*\n"
        f"–£ —Ç–µ–±—è {games[chat_id]['max_attempts']} –ø–æ–ø—ã—Ç–æ–∫!\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –≤ —á–∞—Ç!",
        parse_mode='Markdown'
    )

# –ö–ù–ë —Å –±–æ—Ç–æ–º
@bot.message_handler(func=lambda message: message.text == "‚úä –ö–ù–ë")
def rps_vs_bot(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton("‚úä", callback_data="rps_bot_rock"),
        types.InlineKeyboardButton("‚úåÔ∏è", callback_data="rps_bot_scissors"),
        types.InlineKeyboardButton("‚úã", callback_data="rps_bot_paper")
    ]
    markup.add(*buttons)
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞:", reply_markup=markup)

# –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π
@bot.message_handler(func=lambda message: message.text == "üé≤ –ö–æ—Å—Ç–∏")
def dice_game(message):
    chat_id = message.chat.id
    user_dice = random.randint(1, 6)
    bot_dice = random.randint(1, 6)
    
    result = "üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª!" if user_dice > bot_dice else "ü§ñ –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!" if bot_dice > user_dice else "ü§ù –ù–∏—á—å—è!"
    
    bot.send_message(chat_id,
        f"üé≤ *–ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π!*\n\n"
        f"–¢–≤–æ—è –∫–æ—Å—Ç—å: {user_dice}\n"
        f"–ö–æ—Å—Ç—å –±–æ—Ç–∞: {bot_dice}\n\n"
        f"{result}",
        parse_mode='Markdown'
    )
    
    user_stats[message.from_user.id]['games_played'] += 1
    if user_dice > bot_dice:
        user_stats[message.from_user.id]['wins'] += 1

# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
def trivia_start(message):
    chat_id = message.chat.id
    load_trivia_questions()
    
    if not trivia_questions:
        bot.send_message(chat_id, "‚ùå –í–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
        return
    
    question = random.choice(trivia_questions)
    games[chat_id] = {
        'type': 'trivia',
        'question': question
    }
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(opt) for opt in question['options']]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    
    bot.send_message(chat_id, f"üéÆ *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞!*\n\n{question['question']}", parse_mode='Markdown', reply_markup=markup)

# –ö–ù–ë —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º
@bot.message_handler(func=lambda message: message.text == "‚öîÔ∏è –ö–ù–ë —Å –∏–≥—Ä–æ–∫–æ–º")
def rps_multiplayer_start(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.first_name
    
    if chat_id in waiting_players:
        # –ù–∞–π–¥–µ–Ω –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
        player1_id = waiting_players[chat_id]['player_id']
        player1_name = waiting_players[chat_id]['player_name']
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
        active_matches[chat_id] = {
            'player1': {'id': player1_id, 'name': player1_name, 'choice': None},
            'player2': {'id': user_id, 'name': username, 'choice': None},
            'status': 'waiting_choices'
        }
        
        del waiting_players[chat_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        bot.send_message(chat_id, 
            f"üéÆ *–ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è!*\n"
            f"‚öîÔ∏è {player1_name} vs {username}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ö–æ–¥!",
            parse_mode='Markdown', reply_markup=rps_multiplayer_menu()
        )
        
    else:
        # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –∂–¥–µ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        waiting_players[chat_id] = {
            'player_id': user_id,
            'player_name': username,
            'timestamp': time.time()
        }
        
        bot.send_message(chat_id, 
            f"‚è≥ {username} –∂–¥–µ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –ö–ù–ë...\n"
            f"–î—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å '‚öîÔ∏è –ö–ù–ë —Å –∏–≥—Ä–æ–∫–æ–º'",
            reply_markup=types.ReplyKeyboardRemove()
        )

# –î–∞—Ä—Ç—Å
@bot.message_handler(func=lambda message: message.text == "üéØ –î–∞—Ä—Ç—Å")
def darts_start(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    games[chat_id] = {
        'type': 'darts',
        'players': {},
        'current_player': user_id,
        'round': 1,
        'max_rounds': 3
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    games[chat_id]['players'][user_id] = {
        'name': message.from_user.first_name,
        'score': 0,
        'throws': []
    }
    
    bot.send_message(chat_id,
        f"üéØ *–ù–∞—á–∞–ª–∞—Å—å –∏–≥—Ä–∞ –≤ –î–∞—Ä—Ç—Å!*\n"
        f"–ò–≥—Ä–æ–∫: {message.from_user.first_name}\n"
        f"–†–∞—É–Ω–¥–æ–≤: {games[chat_id]['max_rounds']}\n\n"
        f"–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—Å–∞–≤ '‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'",
        parse_mode='Markdown', reply_markup=darts_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –¥–∞—Ä—Ç—Å—É
@bot.message_handler(func=lambda message: message.text == "‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" and message.chat.id in games and games[message.chat.id]['type'] == 'darts')
def join_darts(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.first_name
    
    if user_id not in games[chat_id]['players']:
        games[chat_id]['players'][user_id] = {
            'name': username,
            'score': 0,
            'throws': []
        }
        
        players_list = "\n".join([f"‚Ä¢ {player['name']}" for player in games[chat_id]['players'].values()])
        
        bot.send_message(chat_id,
            f"üéØ {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –≤ –î–∞—Ä—Ç—Å!\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–∫–∏:\n{players_list}",
            reply_markup=darts_menu()
        )

# –ë—Ä–æ—Å–æ–∫ –¥—Ä–æ—Ç–∏–∫–∞
@bot.message_handler(func=lambda message: message.text == "üéØ –ë—Ä–æ—Å–∏—Ç—å –¥—Ä–æ—Ç–∏–∫" and message.chat.id in games and games[message.chat.id]['type'] == 'darts')
def throw_dart(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    game_data = games[chat_id]
    
    if game_data['current_player'] != user_id:
        bot.send_message(chat_id, "–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!")
        return
    
    # –ë—Ä–æ—Å–æ–∫ –¥—Ä–æ—Ç–∏–∫–∞ (–æ—Ç 0 –¥–æ 60 –æ—á–∫–æ–≤)
    throw_score = random.randint(0, 60)
    game_data['players'][user_id]['score'] += throw_score
    game_data['players'][user_id]['throws'].append(throw_score)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫–∞
    player_ids = list(game_data['players'].keys())
    current_index = player_ids.index(user_id)
    next_index = (current_index + 1) % len(player_ids)
    game_data['current_player'] = player_ids[next_index]
    
    # –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ –±—Ä–æ—Å–∫–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
    if game_data['current_player'] == player_ids[0]:
        game_data['round'] += 1
        
        if game_data['round'] > game_data['max_rounds']:
            # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            show_darts_results(chat_id)
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
    next_player_name = game_data['players'][game_data['current_player']]['name']
    bot.send_message(chat_id,
        f"üéØ {message.from_user.first_name} –±—Ä–æ—Å–∞–µ—Ç –¥—Ä–æ—Ç–∏–∫!\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {throw_score} –æ—á–∫–æ–≤\n"
        f"–û–±—â–∏–π —Å—á—ë—Ç: {game_data['players'][user_id]['score']}\n\n"
        f"–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫: {next_player_name}",
        reply_markup=darts_menu()
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞—Ä—Ç—Å–∞
@bot.message_handler(func=lambda message: message.text == "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã" and message.chat.id in games and games[message.chat.id]['type'] == 'darts')
def show_darts_results(chat_id=None):
    if not chat_id:
        return
    
    game_data = games[chat_id]
    results_text = "üèÜ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –î–∞—Ä—Ç—Å–∞:*\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º
    sorted_players = sorted(game_data['players'].items(), key=lambda x: x[1]['score'], reverse=True)
    
    for i, (player_id, player_data) in enumerate(sorted_players):
        results_text += f"{i+1}. {player_data['name']}: {player_data['score']} –æ—á–∫–æ–≤\n"
        results_text += f"   –ë—Ä–æ—Å–∫–∏: {', '.join(map(str, player_data['throws']))}\n\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if len(sorted_players) > 0:
        winner_id, winner_data = sorted_players[0]
        user_stats[winner_id]['wins'] += 1
        user_stats[winner_id]['darts_score'] += winner_data['score']
        user_stats[winner_id]['darts_games'] += 1
    
    bot.send_message(chat_id, results_text, parse_mode='Markdown')
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    del games[chat_id]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(func=lambda message: message.text == "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    user_id = message.from_user.id
    stats = user_stats.get(user_id, {})
    
    text = "üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
    text += f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats.get('games_played', 0)}\n"
    text += f"üèÜ –ü–æ–±–µ–¥: {stats.get('wins', 0)}\n"
    text += f"‚úä –ö–ù–ë vs –ë–æ—Ç: {stats.get('rps_wins', 0)}\n"
    text += f"‚öîÔ∏è –ö–ù–ë vs –ò–≥—Ä–æ–∫: {stats.get('rps_multi_wins', 0)}\n"
    text += f"üéØ –î–∞—Ä—Ç—Å: {stats.get('darts_score', 0)} –æ—á–∫–æ–≤ ({stats.get('darts_games', 0)} –∏–≥—Ä)"
    
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

# –í—ã—Ö–æ–¥
@bot.message_handler(func=lambda message: message.text == "‚ùå –í—ã—Ö–æ–¥")
def exit_game(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in games:
        del games[chat_id]
    if chat_id in waiting_players:
        del waiting_players[chat_id]
    if chat_id in active_matches:
        del active_matches[chat_id]
    
    bot.send_message(chat_id, "üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('rps_'))
def handle_rps(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    if call.data.startswith('rps_bot_'):
        # –ö–ù–ë —Å –±–æ—Ç–æ–º
        user_choice = call.data.split('_')[2]
        choices = {'rock': '‚úä', 'scissors': '‚úåÔ∏è', 'paper': '‚úã'}
        bot_choice = random.choice(list(choices.keys()))
        
        if user_choice == bot_choice:
            result = "ü§ù –ù–∏—á—å—è!"
        elif (user_choice == 'rock' and bot_choice == 'scissors') or \
             (user_choice == 'scissors' and bot_choice == 'paper') or \
             (user_choice == 'paper' and bot_choice == 'rock'):
            result = "üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª!"
            user_stats[user_id]['wins'] += 1
            user_stats[user_id]['rps_wins'] += 1
        else:
            result = "ü§ñ –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!"
        
        user_stats[user_id]['games_played'] += 1
        
        bot.edit_message_text(
            f"‚úä *–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞*\n\n"
            f"–¢–≤–æ–π –≤—ã–±–æ—Ä: {choices[user_choice]}\n"
            f"–í—ã–±–æ—Ä –±–æ—Ç–∞: {choices[bot_choice]}\n\n"
            f"{result}",
            chat_id, call.message.message_id, parse_mode='Markdown'
        )
    
    elif call.data.startswith('rps_multi_'):
        # –ö–ù–ë —Å –∏–≥—Ä–æ–∫–æ–º (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è multiplayer –∏–≥—Ä
@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –ö–ù–ë —Å –∏–≥—Ä–æ–∫–æ–º
    if chat_id in active_matches and active_matches[chat_id]['status'] == 'waiting_choices':
        match_data = active_matches[chat_id]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç—Ç–æ –∏–≥—Ä–æ–∫
        player_key = None
        if user_id == match_data['player1']['id']:
            player_key = 'player1'
        elif user_id == match_data['player2']['id']:
            player_key = 'player2'
        
        if player_key and text in ["‚úä", "‚úåÔ∏è", "‚úã"]:
            match_data[player_key]['choice'] = text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª–∏ –ª–∏ –≤—ã–±–æ—Ä –æ–±–∞ –∏–≥—Ä–æ–∫–∞
            if match_data['player1']['choice'] and match_data['player2']['choice']:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                determine_rps_winner(chat_id, match_data)
            else:
                bot.send_message(chat_id, f"‚úÖ {message.from_user.first_name} —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä! –ñ–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä
    elif chat_id in games:
        game_data = games[chat_id]
        
        # –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
        if game_data['type'] == 'guess':
            try:
                guess = int(text)
                game_data['attempts'] += 1
                
                if guess < game_data['number']:
                    bot.send_message(chat_id, "üìà –ë–æ–ª—å—à–µ!")
                elif guess > game_data['number']:
                    bot.send_message(chat_id, "üìâ –ú–µ–Ω—å—à–µ!")
                else:
                    user_stats[user_id]['games_played'] += 1
                    user_stats[user_id]['wins'] += 1
                    bot.send_message(chat_id, 
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {game_data['number']} "
                        f"–∑–∞ {game_data['attempts']} –ø–æ–ø—ã—Ç–æ–∫!", 
                        reply_markup=main_menu()
                    )
                    del games[chat_id]
                    return
                
                if game_data['attempts'] >= game_data['max_attempts']:
                    bot.send_message(chat_id, 
                        f"‚ùå –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ß–∏—Å–ª–æ –±—ã–ª–æ: {game_data['number']}", 
                        reply_markup=main_menu()
                    )
                    del games[chat_id]
                    
            except ValueError:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        
        # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
        elif game_data['type'] == 'trivia':
            if text == "‚ùå –û—Ç–º–µ–Ω–∞":
                bot.send_message(chat_id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=main_menu())
                del games[chat_id]
                return
            
            correct_answer = game_data['question']['answer']
            if text.lower() == correct_answer.lower():
                user_stats[user_id]['games_played'] += 1
                user_stats[user_id]['wins'] += 1
                bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=main_menu())
            else:
                bot.send_message(chat_id, 
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}", 
                    reply_markup=main_menu()
                )
                user_stats[user_id]['games_played'] += 1
            del games[chat_id]

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –ö–ù–ë
def determine_rps_winner(chat_id, match_data):
    choice_map = {"‚úä": "–∫–∞–º–µ–Ω—å", "‚úåÔ∏è": "–Ω–æ–∂–Ω–∏—Ü—ã", "‚úã": "–±—É–º–∞–≥–∞"}
    p1_choice = match_data['player1']['choice']
    p2_choice = match_data['player2']['choice']
    
    if p1_choice == p2_choice:
        result_text = "ü§ù –ù–∏—á—å—è!"
        winner = None
    elif (p1_choice == "‚úä" and p2_choice == "‚úåÔ∏è") or \
         (p1_choice == "‚úåÔ∏è" and p2_choice == "‚úã") or \
         (p1_choice == "‚úã" and p2_choice == "‚úä"):
        result_text = f"üéâ {match_data['player1']['name']} –≤—ã–∏–≥—Ä–∞–ª!"
        winner = match_data['player1']['id']
    else:
        result_text = f"üéâ {match_data['player2']['name']} –≤—ã–∏–≥—Ä–∞–ª!"
        winner = match_data['player2']['id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if winner:
        user_stats[winner]['wins'] += 1
        user_stats[winner]['rps_multi_wins'] += 1
        user_stats[winner]['games_played'] += 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.send_message(chat_id,
        f"‚öîÔ∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –ö–ù–ë:*\n\n"
        f"{match_data['player1']['name']}: {p1_choice} ({choice_map[p1_choice]})\n"
        f"{match_data['player2']['name']}: {p2_choice} ({choice_map[p2_choice]})\n\n"
        f"{result_text}",
        parse_mode='Markdown', reply_markup=main_menu()
    )
    
    # –£–¥–∞–ª—è–µ–º –º–∞—Ç—á
    del active_matches[chat_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
if __name__ == "__main__":
    logger.info("üéÆ Multiplayer –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    load_trivia_questions()
    
    try:
        bot.polling(none_stop=True, interval=2, timeout=30)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
