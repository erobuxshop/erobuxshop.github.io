import asyncio
import os
from telethon import TelegramClient, events
from telethon.tl.types import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_ID = 28171360
API_HASH = 'dd21bb5576fd1f889eb5ee5798bf49d7'
PHONE_NUMBER = '+17473403097'

# –§—Ä–µ–π–º—ã –∞–Ω–∏–º–∞—Ü–∏–∏
ANIMATION_FRAMES = [
    "8‚úäüèª====Dü§î",
    "8=‚úäüèª===Dü§î",
    "8==‚úäüèª==Dü§î", 
    "8===‚úäüèª=Dü§î",
    "8====‚úäüèªDü§î",
    "8===‚úäüèª=Dü§î",
    "8==‚úäüèª==Dü§î",
    "8=‚úäüèª===Dü§î",
    "8‚úäüèª====Dü§î",
    "8=‚úäüèª===Dü§î",
    "8==‚úäüèª==Dü§î",
    "8===‚úäüèª=Dü§î",
    "8====‚úäüèªDüí¶üò©",
    "8===‚úäüèª=Dü§î",
    "8====‚úäüèªDüí¶üò©",
    "8===‚úäüèª=Dü§î",
    "8====‚úäüèªDüí¶üò©"
]

class EmojiAnimationUserBot:
    def __init__(self):
        self.client = TelegramClient('emoji_animation_session', API_ID, API_HASH)
        self.animation_active = False
        self.setup_handlers()

    def setup_handlers(self):
        @self.client.on(events.NewMessage(pattern=r'\.animate(?:\s+(\d+))?', outgoing=True))
        async def animate_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .animate [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–≤—Ç–æ—Ä–æ–≤]"""
            if self.animation_active:
                await event.edit("‚èπÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
                return
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                repeats = 10
                if event.pattern_match.group(1):
                    repeats = int(event.pattern_match.group(1))
                    repeats = min(repeats, 50)
                
                self.animation_active = True
                message = event.message
                
                # –ë–´–°–¢–†–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø - 0.1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–∞–¥—Ä
                for cycle in range(repeats):
                    if not self.animation_active:
                        break
                    
                    for frame in ANIMATION_FRAMES:
                        if not self.animation_active:
                            break
                        await message.edit(frame)
                        await asyncio.sleep(0.1)  # ‚ö° –ë–´–°–¢–†–û (0.1 —Å–µ–∫—É–Ω–¥—ã)
                
                if self.animation_active:
                    await message.edit("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                else:
                    await message.edit("‚èπÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                self.animation_active = False
                
            except Exception as e:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                self.animation_active = False

        @self.client.on(events.NewMessage(pattern=r'\.fast', outgoing=True))
        async def fast_animate_handler(event):
            """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è"""
            if self.animation_active:
                await event.edit("‚èπÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
                return
            
            try:
                self.animation_active = True
                message = event.message
                
                # –°–í–ï–†–•–ë–´–°–¢–†–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø - 0.05 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–∞–¥—Ä
                for cycle in range(15):
                    if not self.animation_active:
                        break
                    
                    for frame in ANIMATION_FRAMES:
                        if not self.animation_active:
                            break
                        await message.edit(frame)
                        await asyncio.sleep(0.05)  # ‚ö°‚ö° –û–ß–ï–ù–¨ –ë–´–°–¢–†–û (0.05 —Å–µ–∫—É–Ω–¥—ã)
                
                if self.animation_active:
                    await message.edit("‚úÖ –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                self.animation_active = False
                
            except Exception as e:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                self.animation_active = False

        @self.client.on(events.NewMessage(pattern=r'\.slow', outgoing=True))
        async def slow_animate_handler(event):
            """–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è"""
            if self.animation_active:
                await event.edit("‚èπÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
                return
            
            try:
                self.animation_active = True
                message = event.message
                
                # –ú–ï–î–õ–ï–ù–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø - 0.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–∞–¥—Ä
                for cycle in range(5):
                    if not self.animation_active:
                        break
                    
                    for frame in ANIMATION_FRAMES:
                        if not self.animation_active:
                            break
                        await message.edit(frame)
                        await asyncio.sleep(0.5)  # üê¢ –ú–ï–î–õ–ï–ù–ù–û (0.5 —Å–µ–∫—É–Ω–¥—ã)
                
                if self.animation_active:
                    await message.edit("‚úÖ –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                self.animation_active = False
                
            except Exception as e:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                self.animation_active = False

        @self.client.on(events.NewMessage(pattern=r'\.stop', outgoing=True))
        async def stop_handler(event):
            """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏"""
            if self.animation_active:
                self.animation_active = False
                await event.edit("‚èπÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                await event.edit("‚ùå –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")

        @self.client.on(events.NewMessage(pattern=r'\.help', outgoing=True))
        async def help_handler(event):
            """–°–ø—Ä–∞–≤–∫–∞"""
            help_text = """
ü§ñ **UserBot —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —ç–º–æ–¥–∑–∏**

**–ö–æ–º–∞–Ω–¥—ã:**
`.animate [—á–∏—Å–ª–æ]` - –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (0.1s)
`.fast` - –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (0.05s)  
`.slow` - –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (0.5s)
`.stop` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
`.help` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

**–°–∫–æ—Ä–æ—Å—Ç–∏:**
‚ö° `.fast` - –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ (0.05 —Å–µ–∫/–∫–∞–¥—Ä)
üöÄ `.animate` - –±—ã—Å—Ç—Ä–æ (0.1 —Å–µ–∫/–∫–∞–¥—Ä)
üê¢ `.slow` - –º–µ–¥–ª–µ–Ω–Ω–æ (0.5 —Å–µ–∫/–∫–∞–¥—Ä)
            """
            await event.edit(help_text)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ userbot"""
        print("üöÄ –ó–∞–ø—É—Å–∫ UserBot —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —ç–º–æ–¥–∑–∏...")
        
        try:
            await self.client.start(phone=PHONE_NUMBER)
            print("‚úÖ UserBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print(".animate - –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (0.1s)")
            print(".fast    - –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (0.05s)")
            print(".slow    - –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (0.5s)")
            print(".stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é")
            print(".help    - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
            
            await self.client.run_until_disconnected()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import telethon
    except ImportError:
        print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        os.system('pip install telethon')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = EmojiAnimationUserBot()
    asyncio.run(bot.start())
